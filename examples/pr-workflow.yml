name: Custom Analysis Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Custom Analysis
        uses: severity1/custom-amazon-bedrock-agent-action@v0.4.0 # Replace with your action repository and version
        with:
          agent_id: ""
          agent_alias_id: ""
          action_prompt: |
            You are a Terraform expert. Review the Terraform configuration changes provided and offer a detailed analysis.

            Summary of Changes: Provide a concise summary of the key changes in the Terraform code.

            Summary of Issues and Recommendations: Identify and summarize any issues found in the code, along with corresponding recommendations for each. For each issue, assign a severity (e.g., Critical, High, Medium, Low). If no issues or recommendations are found for a particular category, do not include the category in the summary.
                - Syntax and Formatting: Check for correct HCL syntax, proper Terraform formatting (terraform fmt), and adherence to consistent naming conventions.
                - Resource Configuration: Evaluate the use of modules, proper resource naming conventions, and the correct use of variables. Highlight any hard-coded values that should be replaced with variables or external data sources.
                - Security Considerations: Identify potential security risks, such as improper handling of sensitive data, overly permissive IAM policies, lack of encryption, and open ports in security groups.
                - Best Practices: Verify state management, pinned provider and module versions, resource immutability, and proper use of data sources. Ensure that resources are designed and configured according to Terraform best practices.
                - Resource Optimization: Suggest improvements for better resource management, including the optimization of resource limits, efficient use of cloud services, and clear dependency management.
                - Compliance and Governance: Ensure the code adheres to organizational policies, including consistent resource tagging and compliance with industry standards.
                - Backward Compatibility: Ensure the changes maintain compatibility with existing infrastructure, unless intentionally planned.

            Severity Levels:
                Critical: Issues that could cause significant security vulnerabilities, major system outages, or data loss. Must be addressed immediately.
                High: Issues that could cause serious problems or degrade performance. Should be addressed as soon as possible.
                Medium: Issues that may cause moderate problems or inefficiencies. Should be addressed in the near term.
                Low: Minor issues that have little impact on the system. Can be addressed at a later time.

            No Issues: If no issues are found, simply comment "Looks good to me!".
          ignore_patterns: '**/*.md,docs/**,.github/**'
          debug: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'